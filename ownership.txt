// Example 1:
// This willl not run since s no longer has ownership of the str.
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", s.to_uppercase());
    // would be ok if ref3 isn't used but just s
}

// Example 2: This does not work because you don't specify the lifetime parameter for the return.
// In addition the reference belongs only to the function. So after you run the function it will
// disappear. Therefore a simple way is to just return the String
// statement
fn drip_drop() -> String {
    let s = String::from("hello world!");
    return s;
}

// Example 3:
// This does not work since Vec has not implmented the copy trait. But I feel like we can do a
// complete clone
pub fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0].clone();
    println!("{}", s2);
}
