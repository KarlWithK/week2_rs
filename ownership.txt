// Example 1:
// This will run due to the fact that ownership permits multiple references, but only one mutable references
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", s.to_uppercase());
}

// Example 2: This runs, but you can simply return the string without assigning it to s
fn drip_drop() -> String {
    let s = String::from("hello world!");
    return s;
}

// Example 3:
// This works due to the fact that we are copying s1 into s2 by using the clone function
pub fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0].clone();
    println!("{}", s2);
}
